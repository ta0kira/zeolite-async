$ModuleOnly$

@value interface GraphNode<|#id> {
  getId () -> (#id)
  outgoing () -> (DefaultOrder<#self>)
}

// Example:
//
//   GraphQueue<#n> queue <- ...
//
//   scoped {
//     optional #n node <- empty
//   } cleanup {
//     // General safeguard in case there's a return or break in the loop.
//     \ queue.finish(node)
//   } in while (`present` (node <- queue.exchange(node))) {
//     // Process node.
//   }
@value interface GraphQueue<#n> {
  isEmpty () -> (Bool)
  finish (optional #n) -> ()
  exchange (optional #n) -> (optional #n)
}

@value interface BlockingGraphQueue<#n> {
  refines GraphQueue<#n>

  timedExchange (optional #n,Float) -> (optional #n)
}

@value interface BlockerNode<|#id> {
  blockingCount () -> (Int)
  blocking () -> (DefaultOrder<#id>)
}

@type interface PriorityPolicy<#id> {
  nodeWeight (#id,KVReader<#id,BlockerNode<#id>>) -> (Int)
}

concrete TopoSort<#n,#id> {
  #id immutable
  #id defines Equals<#id>
  #id defines LessThan<#id>
  #id requires Hashed
  #n requires GraphNode<#id>

  // Notes:
  // - All input nodes *must* have unique IDs.
  // - The input does not need to include all nodes in the graph; however, the
  //   entire graph reachable from the input nodes will be processed.
  // - An outgoing edge is treated as a dependency relationship.
  // - Storage space is O(E+V).
  // - Construction complexity is O(E+V).
  @category relationFrom<#n,#id>
    #id immutable
    #id defines Equals<#id>
    #id defines LessThan<#id>
    #id requires Hashed
    #n requires GraphNode<#id>
  (ReadAt<#n>) -> (TopoSort<#n,#id>)

  // Notes:
  // - The input does not need to include all nodes in the graph. All nodes that
  //   are reachable from the provided nodes will be added to the queue.
  // - Storage space is O(E+V).
  // - Construction complexity is O(E+V).
  // - Queue iteration complexity is O(E+V log V).
  @value graphQueue<#p>
    #p defines PriorityPolicy<#id>
  (ReadAt<#id>,Generator<Float>) -> (BlockingGraphQueue<#n>)
}

concrete BidirectionalNode<#id> {
  refines BlockerNode<#id>
  refines Duplicate
  #id immutable
  #id defines Equals<#id>
  #id requires Hashed

  @type new () -> (#self)
  @value addBlocker (#id) -> ()
  @value addBlocking (#id) -> ()
  @value removeBlocker (#id) -> ()
  @value blockers () -> ([Container&DefaultOrder<#id>])
}

define BidirectionalNode {
  @value HashedSet<#id> blockers
  @value HashedSet<#id> blocking

  new () { return #self{ HashedSet<#id>.new(), HashedSet<#id>.new() } }
  addBlocker (id) { \ blockers.add(id) }
  addBlocking (id) { \ blocking.add(id) }
  removeBlocker (id) { \ blockers.remove(id) }
  blockers () { return blockers }
  blocking () { return blocking }
  duplicate () { return #self{ blockers.duplicate(), blocking } }
}

define TopoSort {
  @value KVReader<#id,BidirectionalNode<#id>> graph
  @value KVReader<#id,#n> idToNode

  relationFrom (source) {
    HashedMap<#id,BidirectionalNode<#id>> graph <- HashedMap<#id,BidirectionalNode<#id>>.new()
    HashedMap<#id,#n> idToNode <- HashedMap<#id,#n>.new()

    traverse (`ReadAtH:forwardOrder` source -> #n node1) {
      #id id1 <- node1.getId()
      \ id1 `idToNode.set` node1
      BidirectionalNode<#id> actual1 <- id1 `graph.weakSet` BidirectionalNode<#id>.new()
      traverse (node1.outgoing().defaultOrder() -> #n node2) {
        #id id2 <- node2.getId()
        BidirectionalNode<#id> actual2 <- id2 `graph.weakSet` BidirectionalNode<#id>.new()
        \ actual1.addBlocker(id2)
        \ actual2.addBlocking(id1)
      }
    }

    return TopoSort<#n,#id>{ graph, idToNode }
  }

  graphQueue (source,random) {
    return DependencyQueue:new<#p,#n,#id>(source,random,graph,idToNode)
  }
}

concrete DependencyQueue<#n,#id> {
  #n requires GraphNode<#id>

  @category new<#p,#n,#id>
    #id immutable
    #p defines PriorityPolicy<#id>
    #id defines Equals<#id>
    #id defines LessThan<#id>
    #id requires Hashed
    #n requires GraphNode<#id>
  (ReadAt<#id>,Generator<Float>,KVReader<#id,BidirectionalNode<#id>>,KVReader<#id,#n>) -> (BlockingGraphQueue<#n>)
}

define DependencyQueue {
  $ReadOnly[condition,pending,generator,idToNode,graph]$

  refines BlockingGraphQueue<#n>

  @value [ConditionWait&ConditionResume] condition

  @value Priority<#id>          priority
  @value CategoricalTree<#id>   pending
  @value RandomCategorical<#id> generator

  @value HashedMap<#id,#n>                    idToNode
  @value KVReader<#id,BidirectionalNode<#id>> graph

  new (source,random,graph0,idToNode0) {
    CategoricalTree<#id> pending <- CategoricalTree<#id>.new()

    HashedMap<#id,BidirectionalNode<#id>> graph, HashedMap<#id,#n> idToNode  <-
        SubgraphBuilder:buildFrom(source,graph0,idToNode0)
    $Hidden[idToNode0,graph0]$

    Priority<#id> priority <- #p.new(graph)

    traverse (graph.defaultOrder() -> KeyValue<#id,BidirectionalNode<#id>> idNode) {
      if (idNode.getValue().blockers().size() == 0) {
        \ idNode.getKey() `pending.setWeight` priority.nodePriority(idNode.getKey())
      }
    }

    DependencyQueue<#n,#id> queue <- DependencyQueue<#n,#id>{
        ThreadCondition.new(),
        priority,
        pending,
        pending `RandomCategorical:sampleWith` random,
        idToNode,
        graph }

    if (queue.shouldBlock()) {
      fail("queue will never return a node")
    } else {
      return queue
    }
  }

  isEmpty () {
    scoped {
      MutexLock lock <- MutexLock.lock(condition)
      $Hidden[condition]$
    } cleanup {
      \ lock.freeResource()
    } in return idToNode.size() == 0
  }

  finish (complete) {
    scoped {
      MutexLock lock <- MutexLock.lock(condition)
      $Hidden[condition]$
    } cleanup {
      \ lock.freeResource()
    } in {
      if (`present` complete) {
        \ markComplete(require(complete).getId())
      }
    }
  }

  exchange (complete) {
    return exchangeCommon(complete,empty)
  }

  timedExchange (complete,timeout) {
    return exchangeCommon(complete,timeout)
  }

  @value exchangeCommon (optional #n,optional Float) -> (optional #n)
  exchangeCommon (complete,timeout) {
    scoped {
      MutexLock lock <- MutexLock.lock(condition)
    } cleanup {
      \ lock.freeResource()
    } in {
      if (`present` complete) {
        \ markComplete(require(complete).getId())
      }
      while (shouldBlock()) {
        if (`present` timeout) {
          if (!condition.timedWait(`require` timeout)) {
            break
          }
        } else {
          \ condition.wait()
        }
      }
      if (generator.isEmpty()) {
        return empty
      } else {
        #id id <- generator.generate()
        return idToNode.get(id)
      }
    }
  }

  @value shouldBlock () -> (Bool)
  shouldBlock () {
    return generator.isEmpty() && idToNode.size() > 0
  }

  @value markComplete (#id) -> ()
  markComplete (id1) {
    \ idToNode.remove(id1)
    \ id1 `pending.setWeight` 0
    traverse (require(graph.get(id1)).blocking().defaultOrder() -> #id id2) {
      scoped {
        optional BidirectionalNode<#id> node2 <- graph.get(id2)
      } in if (`present` node2) {
        \ require(node2).removeBlocker(id1)
        if (require(node2).blockers().size() == 0) {
          $Hidden[id1]$
          \ id2 `pending.setWeight` priority.nodePriority(id2)
        }
      }
    }
    if (!shouldBlock()) {
      \ condition.resumeAll()
    }
  }
}

concrete SubgraphBuilder<#n,#id> {
  #id immutable
  #id defines Equals<#id>
  #id defines LessThan<#id>
  #id requires Hashed
  #n requires GraphNode<#id>

  @category buildFrom<#n,#id>
    #id immutable
    #id defines Equals<#id>
    #id defines LessThan<#id>
    #id requires Hashed
    #n requires GraphNode<#id>
  (ReadAt<#id>,KVReader<#id,BidirectionalNode<#id>>,KVReader<#id,#n>) ->
  (HashedMap<#id,BidirectionalNode<#id>>,HashedMap<#id,#n>)
}

define SubgraphBuilder {
  $ReadOnly[idToNode0,idToNode,graph0,graph]$

  @value KVReader<#id,BidirectionalNode<#id>> graph0
  @value KVReader<#id,#n> idToNode0
  @value HashedMap<#id,BidirectionalNode<#id>> graph
  @value HashedMap<#id,#n> idToNode

  buildFrom(source,graph0,idToNode0) {
    SubgraphBuilder<#n,#id> builder <- SubgraphBuilder<#n,#id>{
        graph0,
        idToNode0,
        HashedMap<#id,BidirectionalNode<#id>>.new(),
        HashedMap<#id,#n>.new() }
    traverse (`ReadAtH:forwardOrder` source -> #id id) {
      \ builder.addRecursive(id)
    }
    return builder.results()
  }

  @value addRecursive (#id) -> ()
  addRecursive(id) {
    if (! `present` idToNode.get(id)) {
      \ id `idToNode.set` require(idToNode0.get(id))
      BidirectionalNode<#id> actual <- require(graph0.get(id)).duplicate()
      \ id `graph.set` actual
      traverse (actual.blockers().defaultOrder() -> #id id2) {
        $Hidden[id]$
        \ addRecursive(id2)
      }
    }
  }

  @value results () -> (HashedMap<#id,BidirectionalNode<#id>>,HashedMap<#id,#n>)
  results () {
    return graph, idToNode
  }
}

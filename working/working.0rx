concrete TestProgram {
  @type run () -> ()
}

define TestProgram {
  $ReadOnlyExcept[]$

  @category String testProgram <- $ExprLookup[MODULE_PATH]$ + "/test.sh"

  run () {
    if (Argv.global().size() < 2 || Argv.global().size() > 3) {
      fail(Argv.global().readAt(0) + " \"async\" | (\"small\"|\"tree\"|[size]) (count)")
    }

    if (Argv.global().readAt(1) == "async") {
      \ runAsyncTest()
    } elif (Argv.global().readAt(1) == "tree") {
      \ runTreeTest()
    } else {
      \ runGraphTest()
    }
  }

  @type constructCall (Float,String,Int) -> (ChainCommand<AsyncId>)
  constructCall (delay,message,status) {
    return `ChainCommand:asyncRun<AsyncId>` Command.buildFor(testProgram)
      .addArg(delay)
      .addArg(message)
      .addArg(status)
      .build()
  }

  @type runAsyncTest () -> ()
  runAsyncTest () {
    ChainCommand<AsyncId> exec1 <- constructCall(0.1,"exec1",0)
    ChainCommand<AsyncId> exec2 <- constructCall(0.1,"exec2",0)
    ChainCommand<AsyncId> exec3 <- constructCall(0.1,"exec3",0)
    ChainCommand<AsyncId> exec4 <- constructCall(0.1,"exec4",0).after(exec2).after(exec3)
    ChainCommand<AsyncId> exec5 <- constructCall(0.1,"exec5",0).after(exec2)
    ChainCommand<AsyncId> exec6 <- constructCall(0.1,"exec6",0).after(exec1).after(exec4).after(exec5)

    ErrorOr<Int> status <- exec6 `Compute:with` InlineRunner<AsyncId>.limit(2)

    \ BasicOutput.stderr()
        .write(status.getValue())
        .write("\n")
        .flush()
  }

  @type runTreeTest () -> ()
  runTreeTest () {
    SizedNode<Int> root <- TestBinaryNode.constructWithSize(9)
    Generator<Float> random <- RandomUniform.probability().setSeed(Realtime.monoSeconds().asInt())

    Int count <- 1000
    if (Argv.global().size() >= 3) {
      count <- ParseChars.int(Argv.global().readAt(2)).getValue()
    }

    traverse (`Counter.zeroIndexed` count -> Int i) {
      scoped {
        optional Int nextId <- empty
        GraphTraverser<Int> traverser <- root `TreeTraverser:allWith` random
      } in while (`present` (nextId <- traverser.nextNode())) {
        \ BasicOutput.stdout()
            .write(`require` nextId)
            .write(" ")
            .flush()
      }
      \ BasicOutput.stdout()
          .write("\n")
          .flush()
      \ BasicOutput.stderr()
          .write(i)
          .write("\n")
          .flush()
    }
  }

  @type runGraphTest () -> ()
  runGraphTest () {
    DefaultOrder<GraphNode<Int>> allNodes <- defer
    if (Argv.global().readAt(1) == "small") {
      allNodes <- constructSmall()
    } else {
      allNodes <- `constructLarge` ParseChars.int(Argv.global().readAt(1)).getValue()
    }

    Int count <- 1000
    if (Argv.global().size() >= 3) {
      count <- ParseChars.int(Argv.global().readAt(2)).getValue()
    }

    Generator<Float> random <- RandomUniform.probability().setSeed(Realtime.monoSeconds().asInt())
    IndexSelector selector <- SelectRandomWeighted.with(random)

    traverse (`Counter.zeroIndexed` count -> Int i) {
      DefaultOrder<WeightedNode<Int>> weightedNodes <- WeightedGraphBuilder:fromHashed(`DualGraph:from` allNodes)
      scoped {
        optional Int nextId <- empty
        GraphTraverser<Int> traverser <- weightedNodes `WeightedTraverser:allWith` selector
      } in while (`present` (nextId <- traverser.nextNode())) {
        \ BasicOutput.stdout()
            .write(`require` nextId)
            .write(" ")
            .flush()
      }
      \ BasicOutput.stdout()
          .write("\n")
          .flush()
      \ BasicOutput.stderr()
          .write(i)
          .write("\n")
          .flush()
    }
  }

  @type constructSmall () -> (DefaultOrder<GraphNode<Int>>)
  constructSmall () (graphTree) {
    TestGraphNode node1 <- TestGraphNode.new(1,Vector<TestGraphNode>.new())
    TestGraphNode node2 <- TestGraphNode.new(2,Vector<TestGraphNode>.new())
    TestGraphNode node3 <- TestGraphNode.new(3,Vector<TestGraphNode>.new()
        .append(node1)
        .append(node2))
    TestGraphNode node4 <- TestGraphNode.new(4,Vector<TestGraphNode>.new()
        .append(node1)
        .append(node3))
    TestGraphNode node5 <- TestGraphNode.new(5,Vector<TestGraphNode>.new()
        .append(node1))
    TestGraphNode node6 <- TestGraphNode.new(6,Vector<TestGraphNode>.new())
    TestGraphNode node7 <- TestGraphNode.new(7,Vector<TestGraphNode>.new()
        .append(node6))
    TestGraphNode node8 <- TestGraphNode.new(8,Vector<TestGraphNode>.new())

    Vector<TestGraphNode> allNodes <- Vector<TestGraphNode>.new()
        .append(node1)
        .append(node2)
        .append(node3)
        .append(node4)
        .append(node5)
        .append(node6)
        .append(node7)
        .append(node8)

    return allNodes
  }

  @type constructLarge (Int) -> (DefaultOrder<GraphNode<Int>>)
  constructLarge (size) (graphTree) {
    Vector<TestGraphNode> allNodes <- Vector<TestGraphNode>.new()
    traverse (Counter.zeroIndexed(size) -> Int id) {
      \ allNodes.append(TestGraphNode.new(id,allNodes.duplicate()))
    }
    return allNodes
  }
}

concrete TestGraphNode {
  refines GraphNode<Int>

  @type new (Int,DefaultOrder<TestGraphNode>) -> (#self)
}

define TestGraphNode {
  $ReadOnly[id,outgoing]$

  @value Int id
  @value DefaultOrder<TestGraphNode> outgoing

  new (id,outgoing) {
    return #self{ id, outgoing }
  }

  getId () {
    return id
  }

  outgoing () {
    return outgoing
  }
}

concrete TestBinaryNode {
  immutable
  refines SizedNode<Int>
  refines GraphNode<Int>

  @type constructWithSize (Int) -> (#self)
  // Explicit merge from `SizedNode` and `GraphNode`.
  @value getId () -> (Int)
}

define TestBinaryNode {
  @value Int value
  @value Int size
  @value optional #self left
  @value optional #self right

  constructWithSize (limit) {
    return build(limit,0)
  }

  @type build (Int,Int) -> (#self)
  build (limit,value) {
    Int size <- 1
    optional #self left <- empty
    scoped {
      Int leftValue <- (value << 1)+1
    } in if (leftValue < limit) {
      $Hidden[value]$
      left <- build(limit,leftValue)
      size <- size+require(left).getSize()
    }
    $ReadOnly[left]$
    optional #self right <- empty
    scoped {
      Int rightValue <- (value << 1)+2
    } in if (rightValue < limit) {
      $Hidden[value]$
      right <- build(limit,rightValue)
      size <- size+require(right).getSize()
    }
    $ReadOnly[right]$
    return #self{ value, size, left, right }
  }

  getId () {
    return value
  }

  disownChildren (unblocked) {
    if (`present` left) {
      \ unblocked.append(`require` left)
    }
    if (`present` right) {
      \ unblocked.append(`require` right)
    }
    return self
  }

  getSize () {
    return size
  }

  outgoing () {
    if (`present` left || `present` right) {
      Vector<#self> children <- Vector<#self>.new()
      if (`present` left) {
        \ children.append(`require` left)
      }
      if (`present` right) {
        \ children.append(`require` right)
      }
      return children
    } else {
      return AlwaysEmpty.default()
    }
  }
}

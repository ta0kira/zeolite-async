concrete TopoTest {
  @type run () -> ()
}

define TopoTest {
  run () {
    if (Argv.global().size() < 2 || Argv.global().size() > 3) {
      fail(Argv.global().readAt(0) + " \"async\" | (\"small\"||[size]) (count)")
    }

    if (Argv.global().readAt(1) == "async") {
      \ runAsyncTest()
    } else {
      \ runGraphTest()
    }
  }

  @type runAsyncTest () -> ()
  runAsyncTest () {
    ExecCommand<AsyncId> exec1 <- "/bin/echo" `AsyncExec.withArgs` Vector<Formatted>.new().append("exec1")
    ExecCommand<AsyncId> exec2 <- "/bin/echo" `AsyncExec.withArgs` Vector<Formatted>.new().append("exec2")
    ExecCommand<AsyncId> exec3 <- "/bin/echo" `AsyncExec.withArgs` Vector<Formatted>.new().append("exec3")
    ExecCommand<AsyncId> exec4 <- "/bin/echo" `AsyncExec.withArgs` Vector<Formatted>.new().append("exec4")
    ExecCommand<AsyncId> exec5 <- "/bin/echo" `AsyncExec.withArgs` Vector<Formatted>.new().append("exec5")

    ExecCommand<AsyncId> graph <-
      exec1 `ChainExec.runAfter` Vector<ExecCommand<AsyncId>>.new()
          .append(exec2 `ChainExec.runAfter` Vector<ExecCommand<AsyncId>>.new()
              .append(exec4))
          .append(exec3 `ChainExec.runAfter` Vector<ExecCommand<AsyncId>>.new()
              .append(exec4)
              .append(exec5))

    ErrorOr<Int> status <- graph `Compute:with` InlineRunner<AsyncId>.new()

    \ BasicOutput.stderr()
        .write(status.getValue())
        .write("\n")
        .flush()
  }

  @type runGraphTest () -> ()
  runGraphTest () {
    TopoSort<TestNode,Int> topoSort, ReadAt<Int> nodes <- defer
    if (Argv.global().readAt(1) == "small") {
      topoSort, nodes <- constructSmall()
    } else {
      topoSort, nodes <- `constructLarge` ParseChars.int(Argv.global().readAt(1)).getValue()
    }

    Int count <- 1000
    if (Argv.global().size() >= 3) {
      count <- ParseChars.int(Argv.global().readAt(2)).getValue()
    }

    Generator<Float> random <- RandomUniform.probability().setSeed(Realtime.monoSeconds().asInt())

    traverse (`Counter.zeroIndexed` count -> Int i) {
      GraphQueue<TestNode> queue <- nodes `topoSort.graphQueue<ByBlockingCount>` random
      \ BasicOutput.stderr().writeNow("queue built...\n")
      DefaultOrder<TestNode> copy <- queue `processQueue` Vector<TestNode>.new()
      \ formatNodes(copy)
      \ BasicOutput.stderr()
          .write(i)
          .write("\n")
          .flush()
    }
  }

  @type processQueue (GraphQueue<TestNode>,[Append<TestNode>&DefaultOrder<TestNode>]) -> (DefaultOrder<TestNode>)
  processQueue (queue,output) (result) {
    result <- output
    scoped {
      optional TestNode node <- empty
    } cleanup {
      \ queue.finish(node)
    } in while (`present` (node <- queue.exchange(node))) {
    \ BasicOutput.stderr()
        .write(".")
        .flush()
      \ output.append(`require` node)
    }
  }

  @type constructSmall () -> (TopoSort<TestNode,Int>,ReadAt<Int>)
  constructSmall () (topoSort,nodes) {
    TestNode node1 <- TestNode.new(1,Vector<TestNode>.new())
    TestNode node2 <- TestNode.new(2,Vector<TestNode>.new())
    TestNode node3 <- TestNode.new(3,Vector<TestNode>.new()
        .append(node1)
        .append(node2))
    TestNode node4 <- TestNode.new(4,Vector<TestNode>.new()
        .append(node1)
        .append(node3))
    TestNode node5 <- TestNode.new(5,Vector<TestNode>.new()
        .append(node1))
    TestNode node6 <- TestNode.new(6,Vector<TestNode>.new())
    TestNode node7 <- TestNode.new(7,Vector<TestNode>.new()
        .append(node6))

    topoSort <- `TopoSort:relationFrom<?,Int>` Vector<TestNode>.new()
        .append(node1)
        .append(node2)
        .append(node3)
        .append(node4)
        .append(node5)
        .append(node6)
        .append(node7)

    nodes <- Vector<Int>.new()
        .append(1)
        .append(2)
        .append(3)
        .append(4)
        .append(5)
        .append(6)
        .append(7)
  }

  @type constructLarge (Int) -> (TopoSort<TestNode,Int>,ReadAt<Int>)
  constructLarge (size) (topoSort,nodes) {
    Vector<TestNode> allNodes <- Vector<TestNode>.new()
    traverse (Counter.zeroIndexed(size) -> Int id) {
      \ allNodes.append(TestNode.new(id,allNodes.duplicate()))
    }
    \ BasicOutput.stderr().writeNow("graph built...\n")
    topoSort <- `TopoSort:relationFrom<?,Int>` allNodes
    \ BasicOutput.stderr().writeNow("topo built...\n")
    nodes <- Vector<Int>.new().append(size-1)
  }

  @type formatNodes (DefaultOrder<TestNode>) -> ()
  formatNodes (nodes) {
    traverse (nodes.defaultOrder() -> TestNode node) {
      \ BasicOutput.stdout()
          .write(node.getId())
          .write(" ")
          .flush()
    }
    \ BasicOutput.stdout()
        .write("\n")
        .flush()
  }
}

concrete ByTransitiveCount {
  defines PriorityPolicy<Int>
  refines Priority<Int>
}

define ByTransitiveCount {
  $ReadOnly[priority]$

  @value KVReader<Int,Int> priority

  new (blocking) {
    HashedMap<Int,[Container&DefaultOrder<Int>]> allBlocking <- HashedMap<Int,[Container&DefaultOrder<Int>]>.new()
    traverse (blocking.keyOrder() -> Int key) {
      \ collect(key,blocking,allBlocking)
    }
    HashedMap<Int,Int> priority <- HashedMap<Int,Int>.new()
    traverse (allBlocking.defaultOrder() -> KeyValue<Int,Container> keyValue) {
      \ keyValue.getKey() `priority.set` keyValue.getValue().size()
    }
    return #self{ priority }
  }

  nodePriority (id) {
    return `require` `priority.get` id
  }

  @type collect (Int,KVReader<Int,BlockerNode<Int>>,HashedMap<Int,[Container&DefaultOrder<Int>]>) -> (DefaultOrder<Int>)
  collect (id,blocking,allBlocking) {
    scoped {
      optional DefaultOrder<Int> existing <- `allBlocking.get` id
    } in if (`present` existing) {
      return `require` existing
    } else {
      HashedSet<Int> unique <- HashedSet<Int>.new().add(id)
      BlockerNode<Int> node <- `require` `blocking.get` id
      traverse (node.blocking().defaultOrder() -> Int id2) {
        $Hidden[id,node]$
        \ collect(id2,blocking,allBlocking).defaultOrder() `OrderH:copyTo` unique
      }
      \ id `allBlocking.set` unique
      return unique
    }
  }
}

concrete ByBlockingCount {
  defines PriorityPolicy<Int>
  refines Priority<Int>
}

define ByBlockingCount {
  $ReadOnly[priority]$

  @value KVReader<Int,Int> priority

  new (blocking) {
    HashedMap<Int,Int> priority <- HashedMap<Int,Int>.new()
    traverse (blocking.keyOrder() -> Int key) {
      \ key `priority.set` require(blocking.get(key)).blocking().size()+1
    }
    return #self{ priority }
  }

  nodePriority (id) {
    return `require` `priority.get` id
  }
}

concrete ConstantPriority {
  defines PriorityPolicy<Int>
  refines Priority<Int>
}

define ConstantPriority {
  new (_) {
    return #self{ }
  }

  nodePriority (_) {
    return 1
  }
}

concrete TestNode {
  refines GraphNode<Int>

  @type new (Int,DefaultOrder<TestNode>) -> (#self)
}

define TestNode {
  $ReadOnly[id,outgoing]$

  @value Int id
  @value DefaultOrder<TestNode> outgoing

  new (id,outgoing) {
    return #self{ id, outgoing }
  }

  getId () {
    return id
  }

  outgoing () {
    return outgoing
  }
}

concrete AsyncSum {
  refines AsyncNode<AsyncId>
  refines AsyncValue<Float>

  @type new (DefaultOrder<[AsyncValue<AsFloat>&AsyncNode<AsyncId>]>) -> (#self)
}

concrete AsyncFactorial {
  refines AsyncNode<AsyncId>
  refines AsyncValue<Int>

  @type new (Int) -> (#self)
}

define AsyncSum {
  $ReadOnly[id,deps]$

  refines AsyncRun<AsyncId>

  @value AsyncId id
  @value optional Float result
  @value DefaultOrder<[AsyncValue<AsFloat>&AsyncNode<AsyncId>]> deps

  new (deps) {
    return #self{ AsyncId.new(), empty, deps.defaultOrder() `OrderH:copyTo` Vector<[AsyncValue<AsFloat>&AsyncNode<AsyncId>]>.new() }
  }

  get () { return `require` result }
  getId () { return id }
  collect (collector) { \ self `collector.include` deps }

  start () {
    if (! `present` result) {
      Float result2 <- 0.0
      traverse (deps.defaultOrder() -> AsyncValue<AsFloat> dep) {
        $Hidden[result]$
        result2 <- result2+dep.get().asFloat()
      }
      result <- result2
    }
    return self
  }

  finish () {
    return self
  }

  tryFinish () {
    return `present` result
  }
}

define AsyncFactorial {
  $ReadOnly[id,limit]$

  refines AsyncRun<AsyncId>

  @value AsyncId id
  @value optional Int result
  @value Int limit

  new (limit) {
    return #self{ AsyncId.new(), empty, limit }
  }

  get () { return `require` result }
  getId () { return id }
  collect (collector) { \ self `collector.include` AlwaysEmpty.default() }

  start () {
    if (! `present` result) {
      Int result2 <- 1
      traverse (`Counter.zeroIndexed` limit -> Int minus1) {
        $Hidden[result]$
        result2 <- result2*(minus1+1)
      }
      result <- result2
    }
    return self
  }

  finish () {
    return self
  }

  tryFinish () {
    return `present` result
  }
}

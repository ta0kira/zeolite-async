define CommandPipe {
  @value Vector<CommandBuilder> builders
  @value CommandBuilder lastBuilder

  begin (builder) {
    return #self{
        Vector<CommandBuilder>.new().append(builder),
        builder }
  }

  pipeStdout (builder) {
    \ builders.append(builder)
    FileDescriptor read, FileDescriptor write <- Files.pipe()
    \ `lastBuilder.setStdout` write
    \ `builder.setStdin`      read
    lastBuilder <- builder
    return self
  }

  pipeStderr (builder) {
    \ builders.append(builder)
    FileDescriptor read, FileDescriptor write <- Files.pipe()
    \ `lastBuilder.setStderr` write
    \ `builder.setStdin`      read
    lastBuilder <- builder
    return self
  }

  build () {
    Vector<Command> commands <- Vector<Command>.new()
    traverse (builders.defaultOrder() -> CommandBuilder builder) {
      \ commands.append(builder.build())
    }
    return AggregateCommand.new(commands)
  }
}

$ModuleOnly$

@value interface AsyncNode<|#id> {
  getId () -> (#id)
  getBlockers () -> (DefaultOrder<AsyncNode<#id>>)
  start () -> (#self)
  finish () -> (#self)
  tryFinish () -> (Bool)
}

@value interface AsyncValue<|#x> {
  get () -> (#x)
}

concrete Compute<#id,#x> {
  #id immutable
  #id defines Equals<#id>
  #id requires Hashed

  @category now<#id,#x>
    #id immutable
    #id defines Equals<#id>
    #id requires Hashed
  ([AsyncValue<#x>&AsyncNode<#id>]) -> (#x)
}

concrete AsyncId {
  immutable
  defines Equals<AsyncId>
  defines LessThan<AsyncId>
  refines Formatted
  refines Hashed

  @type new () -> (AsyncId)
}

concrete AsyncSum {
  refines AsyncNode<AsyncId>
  refines AsyncValue<Float>

  @type new (DefaultOrder<[AsyncValue<AsFloat>&AsyncNode<AsyncId>]>) -> (#self)
}

concrete AsyncFactorial {
  refines AsyncNode<AsyncId>
  refines AsyncValue<Int>

  @type new (Int) -> (#self)
}

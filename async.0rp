$ModuleOnly$

@value interface AsyncNode<|#id> {
  collect (AsyncCollector<#id>) -> ()
}

@value interface AsyncRun<|#id> {
  refines AsyncNode<#id>

  getId () -> (#id)
  start () -> (#self)
  finish () -> (#self)
  tryFinish () -> (Bool)
}

@value interface AsyncCollector<#id|> {
  include (AsyncRun<#id>,DefaultOrder<AsyncNode<#id>>) -> (#self)
}

@value interface AsyncValue<|#x> {
  get () -> (#x)
}

concrete Compute<#id,#x> {
  #id immutable
  #id defines Equals<#id>
  #id requires Hashed

  @category now<#id,#x>
    #id immutable
    #id defines Equals<#id>
    #id requires Hashed
  ([AsyncValue<#x>&AsyncNode<#id>]) -> (#x)
}

concrete AsyncId {
  immutable
  defines Equals<AsyncId>
  defines LessThan<AsyncId>
  refines Formatted
  refines Hashed

  @type new () -> (AsyncId)
}

concrete AsyncSum {
  refines AsyncNode<AsyncId>
  refines AsyncValue<Float>

  @type new (DefaultOrder<[AsyncValue<AsFloat>&AsyncNode<AsyncId>]>) -> (#self)
}

concrete AsyncFactorial {
  refines AsyncNode<AsyncId>
  refines AsyncValue<Int>

  @type new (Int) -> (#self)
}

concrete AsyncExec {
  refines AsyncNode<AsyncId>
  // Returns exit status or error message.
  refines AsyncValue<ErrorOr<Int>>

  // Args:
  // - String: Command name.
  // - optional ReadAt<Formatted>: Args not including the command name.
  @type withArgs (String,optional ReadAt<Formatted>) -> (#self)

  @value runOnce () -> (ErrorOr<Int>)
}

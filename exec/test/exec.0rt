testcase "Command tests" {
  success
  exclude stdout "."
  exclude stderr "."
  timeout 5
}

unittest success {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.start().finish()
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest runOnce {
  Command command <- CommandBuilder.for("/bin/sleep").addArg(0.1).build()
  // Make sure the count here is > the testcase timeout.
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest tryFinish {
  Command command <- CommandBuilder.for("/bin/sleep").addArg(0.5).build()
  \ command.start()
  Bool pending <- false
  while (!command.tryFinish()) {
    pending <- true
  }
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest idempotent {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.start().start().finish().finish()
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest failure {
  Command command <- CommandBuilder.for("/bin/false").build()
  \ command.start().finish()
  \ UtilTesting.checkSuccessBetween(command.get(),1,255)
}


testcase "Command bad program name" {
  success
  require stderr "/path/to/bad"
}

unittest test {
  Command command <- CommandBuilder.for("/path/to/bad").build()
  \ command.start().finish()
  \ UtilTesting.checkSuccessBetween(command.get(),1,255)
}


testcase "Command runDetached disables cleanup" {
  success
  require "success"
  exclude "EXIT"
  timeout 5
}

unittest test {
  String shellCommand <- "trap 'echo EXIT' EXIT; sleep 0.5; trap '' EXIT; echo success"
  \ CommandBuilder.for("/bin/bash").addArg("-c").addArg(shellCommand).build().runDetached()
  // Give the command time to finish.
  \ Realtime.sleepSeconds(1.0)
}


testcase "Command automatic cleanup of unfinished" {
  success
  require "EXIT"
  timeout 5
}

unittest test {
  String shellCommand <- "trap 'echo EXIT' EXIT; sleep 10; trap '' EXIT"
  scoped {
    Command command <- CommandBuilder.for("/bin/bash").addArg("-c").addArg(shellCommand).build().start()
  } in \ Realtime.sleepSeconds(0.1)  // Give the command time to start.
  // Give the command time to process the signal.
  \ Realtime.sleepSeconds(0.1)
}


testcase "Command no cleanup of finished" {
  success
  exclude "EXIT"
  timeout 5
}

unittest test {
  String shellCommand <- "trap 'echo EXIT' EXIT; sleep 1; trap '' EXIT"
  scoped {
    Command command <- CommandBuilder.for("/bin/bash").addArg("-c").addArg(shellCommand).build().start().finish()
  } in \ Realtime.sleepSeconds(0.1)  // Give the command time to start.
  // Give the command time to process the signal.
  \ Realtime.sleepSeconds(0.1)
}


testcase "Command finish without start" {
  crash
  require "started"
}

unittest test {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.finish()
}


testcase "Command get without start" {
  crash
  require "started"
}

unittest test {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.get()
}


testcase "Command get without finish" {
  crash
  require "completed"
}

unittest test {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.start()
  \ command.get()
}


testcase "Command replace stdout" {
  success
  require stderr "message"
  exclude stdout "message"
}

unittest test {
  \ CommandBuilder.for("/bin/echo")
      .addArg("message")
      .setStdout(FileDescriptor.stderr())
      .setStderr(FileDescriptor.stdout())
      .build()
      .runOnce()
}


testcase "Command replace stderr" {
  success
  require stdout "message"
  exclude stderr "message"
}

unittest test {
  \ CommandBuilder.for("/bin/sleep")
      .addArg("message")
      .setStdout(FileDescriptor.stderr())
      .setStderr(FileDescriptor.stdout())
      .build()
      .runOnce()
}


testcase "FileDescriptor bad descriptor" {
  crash
  require "5555"
}

unittest test {
  \ FileDescriptor.new(5555)
}


testcase "set non-blocking" {
  success
  exclude "exec\.0rp"
}

unittest test {
  CommandBuilder ls   <- CommandBuilder.for("/bin/ls").addArg($ExprLookup[MODULE_PATH]$)
  CommandBuilder grep <- CommandBuilder.for("/bin/egrep").addArg("-v").addArg("test")
  FileDescriptor read, FileDescriptor write <- Files.pipe()
  \ ls.setStdout(write)
  \ grep.setStdin(read `Files.blocking` false)
  Command lsCommand   <- ls.build()
  Command grepCommand <- grep.build()
  // grep should exit because its stdin is non-blocking and there isn't input yet.
  \ grepCommand.start()
  \ Realtime.sleepSeconds(0.1)
  \ lsCommand.start().finish()
  \ grepCommand.finish()
}


testcase "set blocking" {
  success
  require stdout "exec\.0rp"
  require stdout "src"
  exclude stdout "test"
}

unittest test {
  CommandBuilder ls   <- CommandBuilder.for("/bin/ls").addArg($ExprLookup[MODULE_PATH]$)
  CommandBuilder grep <- CommandBuilder.for("/bin/egrep").addArg("-v").addArg("test")
  FileDescriptor read, FileDescriptor write <- Files.pipe()
  \ ls.setStdout(write)
  \ grep.setStdin(read)
  Command lsCommand   <- ls.build()
  Command grepCommand <- grep.build()
  \ grepCommand.start()
  \ Realtime.sleepSeconds(0.1)
  \ lsCommand.start().finish()
  \ grepCommand.finish()
}


testcase "CommandPipe tests" {
  success
  require stdout "exec\.0rp"
  require stdout "src"
  exclude stdout "test"
  timeout 5
}

unittest test {
  CommandBuilder ls   <- CommandBuilder.for("/bin/ls").addArg($ExprLookup[MODULE_PATH]$)
  CommandBuilder grep <- CommandBuilder.for("/bin/egrep").addArg("-v").addArg("test")
  [AsyncTask&AsyncValue<ErrorOr<Int>>] command <- CommandPipe.begin(ls).pipeStdout(grep).build()
  \ UtilTesting.checkSuccess(command.start().finish().get(),0)
}

testcase "Command tests" {
  success
  timeout 5
}

unittest success {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.start().finish()
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest runOnce {
  Command command <- CommandBuilder.for("/bin/sleep").addArg(0.1).build()
  // Make sure the count here is > the testcase timeout.
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.runOnce(),0)
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest tryFinish {
  Command command <- CommandBuilder.for("/bin/sleep").addArg(0.5).build()
  \ command.start()
  Bool pending <- false
  while (!command.tryFinish()) {
    pending <- true
  }
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest idempotent {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.start().start().finish().finish()
  \ UtilTesting.checkSuccess(command.get(),0)
}

unittest failure {
  Command command <- CommandBuilder.for("/bin/false").build()
  \ command.start().finish()
  \ UtilTesting.checkSuccessBetween(command.get(),0,256)
}

unittest badBinary {
  Command command <- CommandBuilder.for("/path/to/bad").build()
  \ command.start().finish()
  \ UtilTesting.checkSuccessBetween(command.get(),0,256)
}


testcase "Command finish without start" {
  crash
  require "started"
}

unittest test {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.finish()
}


testcase "Command get without start" {
  crash
  require "started"
}

unittest test {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.get()
}


testcase "Command get without finish" {
  crash
  require "completed"
}

unittest test {
  Command command <- CommandBuilder.for("/bin/true").build()
  \ command.start()
  \ command.get()
}

concrete ChainExec<#id> {
  refines AsyncNode<#id>
  refines AsyncValue<ErrorOr<Int>>

  @category asyncRun<#id>
    #id defines UniqueId
  ([AsyncTask&AsyncValue<ErrorOr<Int>>]) -> (ChainExec<#id>)

  @value after ([AsyncNode<#id>&AsyncValue<ErrorOr<Int>>]) -> (#self)
}

concrete Command {
  refines AsyncTask
  refines AsyncValue<ErrorOr<Int>>

  @type new (String,ReadAt<String>,Int,Int,Int) -> (Command)
  @value runOnce () -> (ErrorOr<Int>)
}

concrete CommandBuilder {
  refines Build<Command>
  refines Append<Formatted>

  @type for (String) -> (CommandBuilder)

  @value addArg    (Formatted) -> (#self)
  @value setStdin  (Int)       -> (#self)
  @value setStdout (Int)       -> (#self)
  @value setStderr (Int)       -> (#self)
}

concrete FileDescriptor {
  immutable

  @type new (Int) -> (FileDescriptor)
  @value get () -> (Int)
}

concrete Files {
  @type pipe () -> (FileDescriptor,FileDescriptor)
  @type close (FileDescriptor) -> ()
  @type closeExec (FileDescriptor,Bool) -> (FileDescriptor)
  @type blocking (FileDescriptor,Bool) -> (FileDescriptor)
}

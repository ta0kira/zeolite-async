define InlineRunner {
  new () {
    return #self{ }
  }

  runAll (queue) {
    scoped {
      Bool changed <- true
    } in while (changed) {
      changed <- runExec(queue)
      // Order matters here, due to short-circuiting.
      changed <- runWait(queue) || changed
    }
  }

  @value runExec (TaskQueue<#id>) -> (Bool)
  runExec (queue) (changed) {
    changed <- false
    scoped {
      optional AsyncRun<#id> node <- empty
    } in while (`present` (node <- queue.nextExec())) {
      changed <- true
      \ require(node).start()
      if (require(node).tryFinish()) {
        \ queue.finishTask(`require` node)
      } else {
        \ queue.queueWait(`require` node)
      }
    }
  }

  @value runWait (TaskQueue<#id>) -> (Bool)
  runWait (queue) (changed) {
    changed <- false
    // 1. Attempt to finish all nodes in the wait queue without blocking.
    // 2. If any of them result in another node being unblocked, return control.
    // 3. Otherwise, do a blocking wait and return as soon as any other nodes
    //    are unblocked.
    Bool unblocked <- false
    Queue<AsyncRun<#id>> waitQueue <- SimpleQueue<AsyncRun<#id>>.new()
    scoped {
      optional AsyncRun<#id> node <- empty
    } in while (`present` (node <- queue.nextWait())) {
      changed <- true
      if (!require(node).tryFinish()) {
        \ waitQueue.push(`require` node)
      } else {
        // Order matters here, due to short-circuiting.
        unblocked <- queue.finishTask(`require` node) || unblocked
      }
    }
    if (!unblocked) {
      while (waitQueue.size() > 0) {
        AsyncRun<#id> node <- waitQueue.pop()
        \ node.finish()
        if (queue.finishTask(node)) {
          break
        }
      }
    }
    while (waitQueue.size() > 0) {
      \ queue.queueWait(waitQueue.pop())
    }
  }
}

define Compute {
  $ReadOnly[mutex,idToNode,depends,blocking,execQueue,waitQueue]$

  refines AsyncCollector<#id>
  refines TaskQueue<#id>

  @value Mutex mutex
  @value HashedMap<#id,AsyncRun<#id>> idToNode
  @value HashedMap<#id,HashedSet<#id>> depends
  @value HashedMap<#id,HashedSet<#id>> blocking
  @value Queue<AsyncRun<#id>> execQueue
  @value Queue<AsyncRun<#id>> waitQueue

  with (x,runner) {
    Compute<#id,#x> compute <- Compute<#id,#x>{
        SimpleMutex.new(),
        HashedMap<#id,AsyncRun<#id>>.new(),
        HashedMap<#id,HashedSet<#id>>.new(),
        HashedMap<#id,HashedSet<#id>>.new(),
        SimpleQueue<AsyncRun<#id>>.new(),
        SimpleQueue<AsyncRun<#id>>.new() }
    \ x.collect(compute)
    \ compute.initQueue()
    \ runner.runAll(compute)
    return x.get()
  }

  include (node,blockers) {
    scoped {
      optional HashedSet<#id> existing <- `depends.get` node.getId()
    } in if (! `present` existing) {
      #id id <- node.getId()
      \ id `idToNode.set` node
      HashedSet<#id> newBlockers <- defer
      \ id `depends.set` (newBlockers <- HashedSet<#id>.new())
      // This is used by the parent call.
      \ id `blocking.set` HashedSet<#id>.new()
      traverse (blockers.defaultOrder() -> AsyncNode<#id> blocker) {
        \ blocker.collect(self)
        GetIds<#id> ids <- GetIds<#id>.new()
        \ blocker.collect(ids)
        traverse (ids.allIds().defaultOrder() -> #id id2) {
          \ newBlockers.add(id2)
          // NOTE: The recursive call must come before this so that there's a
          // blocking entry for id2.
          \ require(blocking.get(id2)).add(id)
        }
      }
    }
    return self
  }

  nextExec () {
    $Hidden[waitQueue]$
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in if (execQueue.size() > 0) {
      return execQueue.pop()
    } else {
      return empty
    }
  }

  nextWait () {
    $Hidden[execQueue]$
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in if (waitQueue.size() > 0) {
      return waitQueue.pop()
    } else {
      return empty
    }
  }

  finishTask (node) {
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in return completeId(node.getId())
  }

  queueWait (node) {
    $Hidden[execQueue]$
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in \ waitQueue.push(node)
  }

  @value completeId (#id) -> (Bool)
  completeId (id) (unblocked) {
    unblocked <- false
    scoped {
      HashedSet<#id> wasBlocking <- `require` (id `blocking.swap` empty)
    } in traverse (wasBlocking.defaultOrder() -> #id node) {
      scoped {
        HashedSet<#id> remaining <- require(depends.get(node)).remove(id)
      } in if (remaining.size() == 0) {
        unblocked <- true
        \ depends.remove(node)
        \ execQueue.push(`require` `idToNode.get` node)
      }
    }
  }

  @value initQueue () -> ()
  initQueue () {
    traverse (depends.defaultOrder() -> KeyValue<#id,Container> keyValue) {
      if (keyValue.getValue().size() == 0) {
        \ execQueue.push(`require` `idToNode.get` keyValue.getKey())
      }
    }
  }
}

concrete GetIds<#id> {
  refines AsyncCollector<#id>
  #id immutable
  #id defines Equals<#id>
  #id requires Hashed

  @type new () -> (#self)
  @value allIds () -> (DefaultOrder<#id>)
}

define GetIds {
  @value HashedSet<#id> allIds

  new () {
    return #self{ HashedSet<#id>.new() }
  }

  include (node,_) {
    \ allIds.add(node.getId())
    return self
  }

  allIds () {
    return allIds
  }
}

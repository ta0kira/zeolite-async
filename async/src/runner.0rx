define InlineRunner {
  @value Int max

  new (max) {
    return #self{ max }
  }

  runAll (queue) {
    while (!queue.isComplete()) {
      \ runTask(queue)
      \ runWait(queue)
    }
  }

  @value runTask (TaskQueue<#id>) -> ()
  runTask (queue) {
    scoped {
      optional AsyncRun<#id> node <- empty
    } in while (`present` (node <- queue.nextTask(max))) {
      \ require(node).start()
      if (require(node).tryFinish()) {
        \ queue.finishTask(`require` node)
      } else {
        \ queue.queueWait(`require` node)
      }
    }
  }

  @value runWait (TaskQueue<#id>) -> ()
  runWait (queue) {
    // 1. Attempt to finish all nodes in the wait queue without blocking.
    // 2. If any of them result in another node being unblocked, return control.
    // 3. Otherwise, do a blocking wait and return as soon as any other nodes
    //    are unblocked.
    Bool unblocked <- false
    Queue<AsyncRun<#id>> waitQueue <- SimpleQueue<AsyncRun<#id>>.new()
    scoped {
      optional AsyncRun<#id> node <- empty
    } in while (`present` (node <- queue.nextWait())) {
      if (!require(node).tryFinish()) {
        \ waitQueue.push(`require` node)
      } else {
        // Order matters here, due to short-circuiting.
        unblocked <- queue.finishTask(`require` node) || unblocked
      }
    }
    if (!unblocked) {
      while (waitQueue.size() > 0) {
        AsyncRun<#id> node <- waitQueue.pop()
        \ node.finish()
        if (queue.finishTask(node)) {
          break
        }
      }
    }
    while (waitQueue.size() > 0) {
      \ queue.queueWait(waitQueue.pop())
    }
  }
}

define Compute {
  $ReadOnly[mutex,idToNode,depends,blocking,taskQueue,waitQueue]$

  refines TaskQueue<#id>

  @value Mutex mutex
  @value KVReader<#id,AsyncRun<#id>>    idToNode
  @value KVReader<#id,HashedSet<#id>>   depends
  @value KVExchange<#id,HashedSet<#id>> blocking
  @value Queue<AsyncRun<#id>> taskQueue
  @value Queue<AsyncRun<#id>> waitQueue
  @value Int pendingCount

  with (node,runner) {
    \ Vector<AsyncNode<#id>>.new().append(node) `allWith` runner
    return node.get()
  }

  allWith (nodes,runner) {
    CollectGraph<#id> collector <- CollectGraph<#id>.new()
    traverse (nodes.defaultOrder() -> AsyncNode<#id> node) {
      \ node.collect(collector)
    }
    Compute<#id> compute <- Compute<#id>{
        SimpleMutex.new(),
        collector.idToNode(),
        collector.depends(),
        collector.blocking(),
        collector.taskQueue(),
        SimpleQueue<AsyncRun<#id>>.new(),
        0 }
    \ runner.runAll(compute)
  }

  isComplete () {
    return taskQueue.size()+pendingCount < 1
  }

  nextTask (max) {
    $Hidden[waitQueue]$
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup {
      \ lock.freeResource()
    } in if ((max < 1 || pendingCount < max) && taskQueue.size() > 0) {
      // Only return a task if within the max pending limit.
      pendingCount <- pendingCount+1
      return taskQueue.pop()
    } else {
      return empty
    }
  }

  nextWait () {
    $Hidden[taskQueue]$
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in if (waitQueue.size() > 0) {
      return waitQueue.pop()
    } else {
      return empty
    }
  }

  finishTask (node) {
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in return completeId(node.getId())
  }

  queueWait (node) {
    $Hidden[taskQueue]$
    scoped {
      MutexLock lock <- MutexLock.lock(mutex)
    } cleanup{
      \ lock.freeResource()
    } in \ waitQueue.push(node)
  }

  @value completeId (#id) -> (Bool)
  completeId (id) (unblocked) {
    pendingCount <- pendingCount-1
    unblocked <- false
    scoped {
      HashedSet<#id> wasBlocking <- `require` (id `blocking.swap` empty)
    } in traverse (wasBlocking.defaultOrder() -> #id node) {
      scoped {
        HashedSet<#id> remaining <- require(depends.get(node)).remove(id)
      } in if (remaining.size() == 0) {
        unblocked <- true
        \ taskQueue.push(`require` `idToNode.get` node)
      }
    }
  }
}

concrete CollectGraph<#id> {
  refines AsyncCollector<#id>
  #id immutable
  #id defines Equals<#id>
  #id requires Hashed

  @type new () -> (#self)
  @value idToNode  () -> (KVReader<#id,AsyncRun<#id>>)
  @value depends   () -> (KVReader<#id,HashedSet<#id>>)
  @value blocking  () -> (KVExchange<#id,HashedSet<#id>>)
  @value taskQueue () -> (Queue<AsyncRun<#id>>)
}

define CollectGraph {
  @value optional HashedSet<#id> currentBlocking
  @value HashedMap<#id,AsyncRun<#id>> idToNode
  @value HashedMap<#id,HashedSet<#id>> depends
  @value HashedMap<#id,HashedSet<#id>> blocking

  new () {
    return #self{
        empty,
        HashedMap<#id,AsyncRun<#id>>.new(),
        HashedMap<#id,HashedSet<#id>>.new(),
        HashedMap<#id,HashedSet<#id>>.new() }
  }

  idToNode () {
    return idToNode
  }

  depends () {
    return depends
  }

  blocking () {
    return blocking
  }

  include (node,blockers) {
    #id id <- node.getId()
    $ReadOnly[id]$
    if (`present` currentBlocking) {
      \ require(currentBlocking).add(id)
    }
    if (! `present` `idToNode.get` node.getId()) {
      \ id `idToNode.set` node
      \ id `blocking.set` HashedSet<#id>.new()
      HashedSet<#id> newBlocking <- HashedSet<#id>.new()
      // After this scoped block, newBlocking will contain the IDs of all
      // top-level AsyncRun in blockers. Note that AsyncNode.collect can include
      // any number of AsyncRun in the collector.
      scoped {
        optional HashedSet<#id> oldBlocking <- swapBlocking(newBlocking)
        $Hidden[newBlocking]$
      } in {
        traverse (blockers.defaultOrder() -> AsyncNode<#id> blocker) {
          \ blocker.collect(self)
        }
        \ swapBlocking(oldBlocking)
      }
      \ id `depends.set` newBlocking
      traverse (newBlocking.defaultOrder() -> #id id2) {
        \ require(blocking.get(id2)).add(id)
      }
    }
    return self
  }

  taskQueue () {
    SimpleQueue<AsyncRun<#id>> queue <- SimpleQueue<AsyncRun<#id>>.new()
    traverse (depends.defaultOrder() -> KeyValue<#id,Container> keyValue) {
      if (keyValue.getValue().size() == 0) {
        \ queue.push(`require` `idToNode.get` keyValue.getKey())
      }
    }
    return queue
  }

  @value swapBlocking (optional HashedSet<#id>) -> (optional HashedSet<#id>)
  swapBlocking (new) {
    cleanup {
      currentBlocking <- new
    } in return currentBlocking
  }
}

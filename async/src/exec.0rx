define ChainExec {
  $ReadOnly[id,exec,run,deps,blocking]$

  refines AsyncRun<#id>
  refines AsyncCollector<#id>

  @value optional ErrorOr<Int> result
  @value #id id
  @value [AsyncValue<ErrorOr<Int>>&AsyncNode<#id>] exec
  @value Vector<AsyncRun<#id>> run
  @value Vector<AsyncValue<ErrorOr<Int>>> deps
  @value Vector<AsyncNode<#id>> blocking

  runAfter (exec,nodes) {
    Vector<AsyncValue<ErrorOr<Int>>> deps <- nodes.defaultOrder() `OrderH:copyTo<AsyncValue<ErrorOr<Int>>,?>` Vector<AsyncValue<ErrorOr<Int>>>.new()
    Vector<AsyncNode<#id>>       blocking <- nodes.defaultOrder() `OrderH:copyTo<AsyncNode<#id>,?>`           Vector<AsyncNode<#id>>.new()
    ChainExec<#id> chained <- ChainExec<#id>{ empty, #id.uniqueId(), exec, Vector<AsyncRun<#id>>.new(), deps, blocking }
    \ exec.collect(chained)
    return chained
  }

  include (node,blocking2) {
    \ run.append(node)
    \ blocking2.defaultOrder() `OrderH:copyTo` blocking
    return self
  }

  getId () {
    return id
  }

  start () {
    traverse (run.defaultOrder() -> AsyncRun<#id> process) {
      \ process.start()
    }
    return self
  }

  finish () {
    traverse (run.defaultOrder() -> AsyncRun<#id> process) {
      \ process.finish()
    }
    return self
  }

  tryFinish () (complete) {
    complete <- true
    traverse (run.defaultOrder() -> AsyncRun<#id> process) {
      // Order matters here, due to short-circuiting.
      complete <- process.tryFinish() && complete
    }
  }

  collect (collector) {
    \ self `collector.include` blocking
  }

  get () {
    if (!`present` result) {
      traverse (deps.defaultOrder() -> AsyncValue<ErrorOr<Int>> dep) {
        scoped {
          ErrorOr<Int> status <- dep.get()
        } in if (status.isError() || status.getValue() != 0) {
          result <- status
          break
        }
      }
    }
    if (! `present` result) {
      result <- exec.get()
    }
    return `require` result
  }
}

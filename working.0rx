concrete TopoTest {
  @type run () -> ()
}

define TopoTest {
  run () {
    if (Argv.global().size() < 2 || Argv.global().size() > 3) {
      fail(Argv.global().readAt(0) + " (\"small\"|[size]) (count)")
    }

    TopoSort<TestNode,Int> topoSort, ReadAt<Int> nodes <- defer
    if (Argv.global().readAt(1) == "small") {
      topoSort, nodes <- constructSmall()
    } else {
      topoSort, nodes <- `constructLarge` ParseChars.int(Argv.global().readAt(1)).getValue()
    }

    Int count <- 1000
    if (Argv.global().size() >= 3) {
      count <- ParseChars.int(Argv.global().readAt(2)).getValue()
    }

    Generator<Float> random <- RandomUniform.probability().setSeed(Realtime.monoSeconds().asInt())

    traverse (`Counter.zeroIndexed` count -> Int i) {
      GraphQueue<TestNode> queue <- nodes `topoSort.graphQueue<ByBlockingCount>` random
      \ BasicOutput.stderr().writeNow("queue built...\n")
      DefaultOrder<TestNode> copy <- queue `processQueue` Vector<TestNode>.new()
      \ formatNodes(copy)
      \ BasicOutput.stderr()
          .write(i)
          .write("\n")
          .flush()
    }
  }

  @type processQueue (GraphQueue<TestNode>,[Append<TestNode>&DefaultOrder<TestNode>]) -> (DefaultOrder<TestNode>)
  processQueue (queue,output) (result) {
    result <- output
    scoped {
      optional TestNode node <- empty
    } cleanup {
      \ queue.finish(node)
    } in while (`present` (node <- queue.exchange(node))) {
    \ BasicOutput.stderr()
        .write(".")
        .flush()
      \ output.append(`require` node)
    }
  }

  @type constructSmall () -> (TopoSort<TestNode,Int>,ReadAt<Int>)
  constructSmall () (topoSort,nodes) {
    TestNode node1 <- TestNode.new(1,Vector<TestNode>.new())
    TestNode node2 <- TestNode.new(2,Vector<TestNode>.new())
    TestNode node3 <- TestNode.new(3,Vector<TestNode>.new()
        .append(node1)
        .append(node2))
    TestNode node4 <- TestNode.new(4,Vector<TestNode>.new()
        .append(node1)
        .append(node3))
    TestNode node5 <- TestNode.new(5,Vector<TestNode>.new()
        .append(node1))
    TestNode node6 <- TestNode.new(6,Vector<TestNode>.new())
    TestNode node7 <- TestNode.new(7,Vector<TestNode>.new()
        .append(node6))

    topoSort <- `TopoSort:relationFrom<?,Int>` Vector<TestNode>.new()
        .append(node1)
        .append(node2)
        .append(node3)
        .append(node4)
        .append(node5)
        .append(node6)
        .append(node7)

    nodes <- Vector<Int>.new()
        .append(1)
        .append(2)
        .append(3)
        .append(4)
        .append(5)
        .append(6)
        .append(7)
  }

  @type constructLarge (Int) -> (TopoSort<TestNode,Int>,ReadAt<Int>)
  constructLarge (size) (topoSort,nodes) {
    Vector<TestNode> allNodes <- Vector<TestNode>.new()
    traverse (Counter.zeroIndexed(size) -> Int id) {
      \ allNodes.append(TestNode.new(id,allNodes.duplicate()))
    }
    \ BasicOutput.stderr().writeNow("graph built...\n")
    topoSort <- `TopoSort:relationFrom<?,Int>` allNodes
    \ BasicOutput.stderr().writeNow("topo built...\n")
    nodes <- Vector<Int>.new().append(size-1)
  }

  @type formatNodes (DefaultOrder<TestNode>) -> ()
  formatNodes (nodes) {
    traverse (nodes.defaultOrder() -> TestNode node) {
      \ BasicOutput.stdout()
          .write(node.getId())
          .write(" ")
          .flush()
    }
    \ BasicOutput.stdout()
        .write("\n")
        .flush()
  }
}

concrete ByTransitiveCount {
  defines PriorityPolicy<Int>
}

define ByTransitiveCount {
  nodeWeight (id,blocking) {
    HashedSet<Int> unique <- HashedSet<Int>.new()
    \ collect(id,blocking,unique)
    return unique.size()
  }

  @type collect (Int,KVReader<Int,BlockerNode<Int>>,HashedSet<Int>) -> ()
  collect (id,blocking,unique) {
    if (! `unique.member` id) {
      \ unique.add(id)
      traverse (require(blocking.get(id)).blocking().defaultOrder() -> Int id2) {
        $Hidden[id]$
        \ collect(id2,blocking,unique)
      }
    }
  }
}

concrete ByBlockingCount {
  defines PriorityPolicy<Int>
}

define ByBlockingCount {
  nodeWeight (id,blocking) {
    return require(blocking.get(id)).blockingCount()+1
  }
}

concrete ConstantPriority {
  defines PriorityPolicy<Int>
}

define ConstantPriority {
  nodeWeight (_,_) {
    return 1
  }
}

concrete TestNode {
  refines GraphNode<Int>

  @type new (Int,DefaultOrder<TestNode>) -> (#self)
}

define TestNode {
  $ReadOnly[id,outgoing]$

  @value Int id
  @value DefaultOrder<TestNode> outgoing

  new (id,outgoing) {
    return #self{ id, outgoing }
  }

  getId () {
    return id
  }

  outgoing () {
    return outgoing
  }
}
